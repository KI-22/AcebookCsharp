@model acebook.Models.User
@using acebook.Models
@{
    var errorMessage = TempData["ErrorMessage"];
    var successMessage = TempData["SuccessMessage"];
}
@if (errorMessage != null)
{
    <div class="alert alert-danger text-center">
        @errorMessage
    </div>
}
@if (successMessage != null)
{
    <div class="alert alert-success text-center">
        @successMessage
    </div>
}

<div class="profile-buttons">
    @if (Context.Session.GetString("Username") == ViewBag.ProfileUserName)
    {
        <a href="@Url.Action("Profile", "Users", new { username = ViewBag.ProfileUserName })" class="btn btn-primary">Profile</a>
        <a href="@Url.Action("Index", "Friendships")" class="btn btn-primary">Friends</a>
    }
    <form action="@Url.Action("Logout", "Sessions")" method="post" style="display:inline;">
        <button type="submit" class="btn btn-secondary">Logout</button>
    </form>
</div>
<div class="post-form">
    <img src="@(string.IsNullOrEmpty(ViewBag.CurrentUser?.profilePicture) ? "/images/default-profile.png" : ViewBag.CurrentUser.profilePicture)" 
        alt="User Profile Picture" class="profile-pic" />
    <form action="/posts" method="post" enctype="multipart/form-data">
        <!-- Hidden field to store the ReturnUrl -->
        <input type="hidden" name="ReturnUrl" value="@Context.Request.Path.Value" />
        
        <div class="input-container">
            <input type="text" id="PostText" name="PostText" placeholder="What's on your mind?" class="post-input" />
        </div>
        <div class="image-upload">
            <label for="PostImageUrl"></label>
            <input type="text" id="PostImageUrl" name="PostImageUrl" placeholder="Enter image URL" class="image-input" />
            <span>or</span>
            <input type="file" id="PostImageFile" name="PostImageFile" class="file-input" />
            <button type="submit" id="submit" class="post-btn">Post</button>
        </div>
    </form>
</div>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .post-link, .post-link:visited, .post-link:active, .post-link:hover {
        all: unset !important;
        cursor: pointer !important;
        display: block !important;
    }
</style>
@foreach (Post post in ViewBag.Posts)
{
    <div class="post-container">
        <div class="user-info">
            <a href="@Url.Action("Profile", "Users", new { username = post.User?.Name })" class="post-link">
            <img src="@(string.IsNullOrEmpty(post.User?.profilePicture) ? "/images/default-profile.png" : post.User.profilePicture)" 
                alt="User Profile Picture" class="profile-pic" />
            <p class="user-name">@post.User?.Name</p>
            </a>
        </div>
        <div class="post-content">
            <a href="@Url.Action("GetPost", "Posts", new { postId = post.Id })" class="post-link">
                <p class="post-text">@post.PostText</p>
                @if (!string.IsNullOrEmpty(post.PostImage))
                {
                    <img src="@post.PostImage" alt="Post Image" class="post-image" />
                }
            </a>
            <p class="post-meta-date">Posted on: @post.CreatedAt.ToString("dd MMM yyyy, HH:mm")</p>

            <div class="like-section">
                @{
                    var dictLikeUnlike = ViewBag.LikeUnlike as Dictionary<int, List<int>>;
                }
                @* <form method="post" asp-controller="Likes" asp-action="LikePost" asp-route-postId="@post.Id"> *@
                <form method="post" asp-controller="Likes" asp-action="LikePost" asp-route-postId="@post.Id" asp-route-returnUrl="@ViewBag.CurrentURL">
                    @{
                        bool hasLiked = dictLikeUnlike != null && dictLikeUnlike.ContainsKey(post.Id) && dictLikeUnlike[post.Id].Contains(ViewBag.CurrentUser.Id);
                        var likeOrUnlike = hasLiked ? "Unlike" : "Like";
                    }
                    <button type="submit" class="btn btn-primary">@likeOrUnlike</button>
                </form>
                <div class="like-count">
                    @{
                        var likesCount = ViewBag.LikesCount as Dictionary<int, int>;
                        if (likesCount != null)
                        {   
                            if (likesCount.ContainsKey(post.Id))
                            {
                                <span>üëç@likesCount[post.Id] likes</span>
                            }
                            else{
                                <span>üëç0 likes</span>
                            }
                        }
                        else 
                        {
                            <span>üëç0 likes</span>
                        }
                    }
                </div>
            </div>

            <div class="comment-count">
                <span>0 comments</span> 
            </div>
        
        <!-- Delete Button: Only show if the logged-in user owns the post -->
            @if (Context.Session.GetInt32("user_id") == post.UserId)
            {
                <form action="@Url.Action("Delete", "Posts", new { id = post.Id })" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="ReturnUrl" value="@Context.Request.Path" />
                    <button type="submit" class="delete-button-post">Delete Post</button>
                </form>
            }
        </div>
        
    </div>
}



