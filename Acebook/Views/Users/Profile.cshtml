@model acebook.Models.User
@using acebook.Models
@{
    var successMessage = TempData["SuccessMessage"];
    var errorMessage = TempData["ErrorMessage"];
    var currentUserId = Context.Session.GetInt32("user_id");
    var isFriendRequestPending = ViewBag.IsFriendRequestPending ?? false;
    var restrictedProfile = ViewBag.RestrictedProfile ?? false;
}

@if (successMessage != null)
{
    <div class="alert alert-success text-center">
        @successMessage
    </div>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger text-center">
        @errorMessage
    </div>
}
<div class="profile-buttons">
    @if (Context.Session.GetString("Username") != null && Context.Session.GetString("Username") != Model.Name)
    {
        <form id="friendRequestForm"
            action="@Url.Action(ViewBag.IsFriendRequestPending ? "CancelFriendRequest" : "SendFriendRequest", "Friendships")"
            method="post">
            <input type="hidden" name="receiverId" value="@Model.Id" />
            <button type="submit" id="friendRequestButton"
                class="btn @(ViewBag.IsFriendRequestPending ? "btn-danger" : (ViewBag.IsFriends ? "btn-success" : "btn-primary"))" 
                @(ViewBag.IsFriends ? "disabled" : "")>
                @(ViewBag.IsFriends ? "Friends ‚úÖ" : (ViewBag.IsFriendRequestPending ? "Cancel Request" : "Add Friend"))
            </button>
        </form>
    }
    @if (Context.Session.GetString("Username") == Model.Name)
    {
        <a href="@Url.Action("Edit", new { username = Model.Name })" class="btn btn-primary">Edit Profile</a>
    }

    <a href="@Url.Action("Index", "Friendships")" class="btn btn-primary">View Friendships</a>

    <form action="@Url.Action("Logout", "Sessions")" method="post" style="display:inline;">
        <button type="submit" class="btn btn-secondary">Logout</button>
    </form>

    
</div>

<div class="profile-container-profile">
    <div class="user-info-profile">
        @if (!string.IsNullOrEmpty(Model.profilePicture))
        {
            <img src="@Model.profilePicture" alt="@Model.Name's Profile Picture" class="profile-pic-profile" />
        }
        else
        {
            <p>No profile picture set.</p>
        }
        <h1 class="user-name-profile">@Model.Name</h1>
        <p>About me</p>
        <p class="user-bio-profile">@Model.Bio</p>
        <p>Member since: @Model.JoinedDate.ToString("MMMM dd, yyyy")</p>
        <a href="@Url.Action("Index", "Friendships")" class="friends-link-profile">Friends</a>

        @if (restrictedProfile == true)
        {
            <p class="private-profile">This profile is private.</p>
        }
    </div>


    @if (Context.Session.GetString("Username") == Model.Name)
    {
        <div class="post-form-profile">
            <form action="/posts" method="post" enctype="multipart/form-data">
                <input type="hidden" name="ReturnUrl" value="@Context.Request.Path.Value" />

                <div class="input-container-profile">
                    <input type="text" id="PostText" name="PostText" placeholder="What's on your mind?" class="post-input-profile" />
                </div>

                <div class="image-upload-profile">
                    <label for="PostImageUrl"></label>
                    <input type="text" id="PostImageUrl" name="PostImageUrl" placeholder="Enter image URL" class="image-input-profile" />
                    <span>or</span>
                    <input type="file" id="PostImageFile" name="PostImageFile" class="file-input-profile" />
                    <button type="submit" id="submit" class="post-btn-profile">Post</button>
                </div>
            </form>
        </div>
    }



    @if (restrictedProfile == false)
    {
        <div class="posts-container-profile">
            <h2>@Model.Name's Posts</h2>
            @{
                var posts = ViewBag.CurrentUsersPosts as IEnumerable<Post>;
            }
            @if (posts != null && posts.Any())
            {
                <ul>
                    @foreach (var post in posts)
                    {
                        <li class="post-container-profile">
                            <div class="user-info-profile">
                                <a href="@Url.Action("Profile", "Users", new { username = post.User?.Name })" class="post-link">
                                <img src="@(string.IsNullOrEmpty(post.User?.profilePicture) ? "/images/default-profile.png" : post.User.profilePicture)" 
                                    alt="User Profile Picture" class="profile-pic" />
                                <p class="user-name">@post.User?.Name</p>
                                </a>
                            </div>
                            <div class="post-content-profile">
                                <a href="@Url.Action("GetPost", "Posts", new { postId = post.Id })" class="post-link">
                                    <p class="post-text-profile">@post.PostText</p>
                                    @if (!string.IsNullOrEmpty(post.PostImage))
                                    {
                                        <img src="@post.PostImage" alt="Post Image" class="post-image-profile" />
                                    }
                                </a>
                                <p class="post-meta-profile">Posted on: @post.CreatedAt.ToString("MMMM dd, yyyy - hh:mm tt")</p>
                                <div>
                                    @{
                                        var likesCount = ViewBag.PostLikesCount as Dictionary<int, int>;
                                        var dictLikeUnlike = ViewBag.LikeUnlike as Dictionary<int, List<int>>;
                                        bool hasLiked = dictLikeUnlike != null && dictLikeUnlike.ContainsKey(post.Id) && dictLikeUnlike[post.Id].Contains(ViewBag.currentUserId );
                                        var likeOrUnlike = hasLiked ? "Unlike" : "Like";
                                        var methodLikeUnlike = hasLiked ? "UnlikePost" : "LikePost";
                                    }

                                <form method="post" asp-controller="Likes" asp-action="@methodLikeUnlike" asp-route-postId="@post.Id" asp-route-returnUrl="@ViewBag.CurrentURL">
                                    <button type="submit" class="btn btn-primary">@likeOrUnlike</button>
                                </form>

                                <div class="reactions-profile">
                                    <div class="like-count">
                                    @{
                                        if (likesCount != null)
                                        {   
                                            if (likesCount.ContainsKey(post.Id))
                                            {
                                                <span>üëç@likesCount[post.Id] likes</span>
                                            }
                                            else{
                                                <span>üëç-1 likes</span> // testing
                                            }
                                        }
                                        else 
                                        {
                                            <span>üëç-2 likes</span> // testing
                                        }
                                    }
                                    </div>
                                    <div class="comment-count">
                                        <a href="@Url.Action("GetPost", "Posts", new { postId = post.Id })" class="post-link">
                                        @{
                                            var commentsCount = ViewBag.CommentsCount as Dictionary<int, int>;
                                            if (commentsCount != null)
                                            {   
                                                if (commentsCount.ContainsKey(post.Id))
                                                {
                                                    <span>üí¨@commentsCount[post.Id] comments</span>
                                                }
                                                else{
                                                    <span>üëç0 comments</span>
                                                }
                                            }
                                            else 
                                            {
                                                <span>üí¨0 comments</span>
                                            }
                                        }
                                        </a>
                                    </div>
                                </div>                                
                                    @if (Context.Session.GetInt32("user_id") == post.UserId)
                                    {
                                        <form asp-controller="Posts" asp-action="Delete" method="post" asp-route-id="@post.Id">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="ReturnUrl" value="@Context.Request.Path" />
                                            <button type="submit" class="delete-button-profile">Delete Post</button>
                                        </form>
                                    }
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No posts available.</p>
            }
        </div>
    }
    else
    {
        <p>This user's posts are private.</p>
    }
</div>


@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .post-link, .post-link:visited, .post-link:active, .post-link:hover {
        all: unset !important;
        cursor: pointer !important;
        display: block !important;
    }
</style>


<script>
document.getElementById("friendRequestForm").addEventListener("submit", function(event) {
    event.preventDefault();
    
    var form = event.target;
    var button = document.getElementById("friendRequestButton");
    var isCanceling = button.innerText.trim() === "Cancel Request";

    fetch(form.action, {
        method: form.method,
        body: new FormData(form)
    })
    .then(response => response.json())  
    .then(data => {
        if (data.success) {
            if (isCanceling) {
                button.innerText = "Add Friend";
                button.classList.remove("btn-danger");
                button.classList.add("btn-primary");
                showMessage("Friend request canceled!", "alert alert-danger");
            } else {
                button.innerText = "Cancel Request";
                button.classList.remove("btn-primary");
                button.classList.add("btn-danger");
                showMessage("Friend request sent!", "alert alert-success");
            }

            // Disable button for 3 seconds to prevent multiple clicks
            button.disabled = true;
            setTimeout(() => { button.disabled = false; }, 3000);

            // Update form action dynamically
            form.action = isCanceling 
                ? "@Url.Action("SendFriendRequest", "Friendships")"
                : "@Url.Action("CancelFriendRequest", "Friendships")";
        } else {
            showMessage(data.message, "alert alert-warning");
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showMessage("Something went wrong. Please try again.", "alert alert-danger");
    });
});

// If user is already friends, disable button and change text
window.onload = function() {
    var button = document.getElementById("friendRequestButton");
    if (button.innerText.trim() === "Friends ‚úÖ") {
        button.disabled = true;
    }
};

function showMessage(text, className) {
    var messageDiv = document.createElement("div");
    messageDiv.className = className + " text-center";
    messageDiv.innerText = text;
    document.body.insertBefore(messageDiv, document.body.firstChild);
    
    setTimeout(() => messageDiv.remove(), 3000);
}
</script>
